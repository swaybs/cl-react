{"version":3,"sources":["components/NavBar.js","components/starAPI.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["NavStyle","background","NavBar","react_default","a","createElement","AppBar_default","position","style","Toolbar_default","IconButton_default","color","aria-label","Menu_default","Typography_default","variant","align","API","DEFAULT_QUERY","require","get","then","result","console","log","StarWarsAPI","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ComponentDidMount","fetch","response","json","data","setState","hits","state","map","hit","key","objectID","href","url","title","Component","PrimaryButtonStyles","borderRadius","padding","boxShadow","margin","SecondaryButtonStyles","BodyStyle","top","left","marginRight","transform","InputStyle","width","DividerStyle","display","MainButtons","React","Button_default","id","className","size","Divider","CityInput","TextField_default","type","placeholder","helperText","fullWidth","inputProps","textAlign","FormHelperTextProps","getInputText","input_value","document","getElementById","value","innerHTML","ReturnSomething","MainBody","Body_CityInput","Body_ReturnSomething","starAPI","Body_Divider","Body_MainButtons","App","components_NavBar","Body","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.310696b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst NavStyle = {\r\n  // backgroundColor: '#1F3037',\r\n  background: 'linear-gradient(135deg, #171A1F 60%, #5D151D 100%)',\r\n\r\n};\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\" style={NavStyle}>\r\n        <Toolbar>\r\n        <IconButton color='inherit' aria-label='Menu'>\r\n        <MenuIcon />\r\n        </IconButton>\r\n          <Typography\r\n            variant=\"title\"\r\n            color=\"inherit\"\r\n            align=\"center\">\r\n            Star Wars\r\n          </Typography>\r\n        </Toolbar>\r\n        </AppBar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from 'react';\r\n{/*import $ from 'jquery';*/}\r\n\r\n\r\n\r\nconst API = 'https://swapi.co/api/';\r\nconst DEFAULT_QUERY = 'starships/9/';\r\n\r\n\r\nvar swapi = require('swapi-node');\r\n\r\nswapi.get('https://swapi.co/api/planets').then((result) => {\r\n  console.log(result);\r\n  \r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass StarWarsAPI extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hits: [],\r\n    };\r\n  }\r\n\r\n  ComponentDidMount = () => {\r\n    fetch(API + DEFAULT_QUERY)\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ hits: data.hits }));\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    const { hits } = this.state;\r\n\r\n    return (\r\n      <ul>\r\n        {hits.map(hit =>\r\n          <li key={hit.objectID}>\r\n            <a href={hit.url}>{hit.title}</a>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default StarWarsAPI;\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport StarWarsAPI from './starAPI';\r\n\r\nconst ButtonStyles = {\r\n  margin: '10px',\r\n};\r\n\r\nconst PrimaryButtonStyles = {\r\n  background: '#3E151C',\r\n  color: 'white',\r\n  borderRadius: 5,\r\n  padding: '0 30px',\r\n  boxShadow: 'o 3px 5px 2px rgba(255, 105, 135, .3)',\r\n  margin: '10px',\r\n};\r\n\r\nconst SecondaryButtonStyles = {\r\n  background: '#A5B2A7',\r\n  color: 'white',\r\n  borderRadius: 5,\r\n  padding: '0 30px',\r\n  boxShadow: 'o 3px 5px 2px rgba(255, 105, 135, .3)',\r\n  margin: '10px',\r\n};\r\n\r\nconst BodyStyle = {\r\n\r\n  /*border: '2px solid #D1ADBA',*/\r\n  margin: '0 auto',\r\n  padding: '10px',\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  marginRight: '-50&',\r\n  transform: 'translate(-50%, -50%)'\r\n};\r\n\r\nconst InputStyle = {\r\n  width: 'calc(200px + 2vmin)',\r\n  position: 'relative',\r\n  margin: '0 auto',\r\n  padding: '20px',\r\n};\r\n\r\nconst DividerStyle = {\r\n  width: '20px',\r\n  display: 'inline-block',\r\n  position: 'relative'\r\n};\r\n\r\n// WRITE NEW CLASS FOR BUTTONS TO RETURN\r\n// TEXT FROM TEXTFIELD INTO DIV\r\nclass ButtonMains extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: \"\",\r\n    };\r\n\r\n\r\n  }\r\n}\r\n\r\nconst MainButtons = () => {\r\n  return (\r\n    <div>\r\n    <Button\r\n      id=\"button-load\"\r\n      variant='contained'\r\n      className=\"Button\"\r\n      size='large'\r\n      color=\"primary\"\r\n      style={PrimaryButtonStyles}>\r\n        Load\r\n        </Button>\r\n    <Button\r\n      id='button-reset'\r\n      className=\"Button\"\r\n      variant='contained'\r\n      size='large'\r\n      color=\"secondary\"\r\n      style={SecondaryButtonStyles}>\r\n        Reset\r\n        </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nconst Divider = () => {\r\n  return (\r\n    <div></div>\r\n  );\r\n}\r\n\r\n\r\nconst CityInput = () => (\r\n  <form>\r\n    <br/>\r\n      <TextField\r\n        style={InputStyle}\r\n        id=\"city\"\r\n        type=\"search\"\r\n        // label=\"City\"\r\n        placeholder=\"City\"\r\n        helperText='Type the name of your city.'\r\n        fullWidth\r\n        inputProps={{\r\n          style: { textAlign: 'center' }\r\n        }}\r\n        FormHelperTextProps={{\r\n          style: { textAlign: 'center' }\r\n        }}\r\n        />\r\n      <br/>\r\n      <TextField\r\n        style={InputStyle}\r\n        id=\"state\"\r\n        type=\"search\"\r\n        // label=\"State\"\r\n        placeholder=\"State\"\r\n        helperText='Type the name of state.'\r\n        fullWidth\r\n        inputProps={{\r\n          style: { textAlign: 'center' }\r\n        }}\r\n        FormHelperTextProps={{\r\n          style: { textAlign: 'center' }\r\n        }}\r\n        />\r\n  </form>\r\n  );\r\n\r\nfunction getInputText () {\r\n  var input_value = document.getElementById('city').value;\r\n  return document.getElementById('return-h1').innerHTML = input_value;\r\n}\r\n\r\nconst ReturnSomething = () => {\r\n  return (\r\n    <div>\r\n    <h1 id=\"return-h1\">{getInputText}</h1>\r\n    <h1></h1>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst MainBody = () => {\r\n  return (\r\n    <div style={BodyStyle}>\r\n      <CityInput />\r\n      <ReturnSomething />\r\n      <StarWarsAPI />\r\n      <Divider style={DividerStyle} />\r\n      <MainButtons />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default MainBody;\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport NavBar from './components/NavBar';\nimport MainBody from './components/Body';\n// import WeatherMain from './components/Weather';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Wrapper\">\n          <div className=\"Top-Nav\">\n            <NavBar />\n          </div>\n            <div className=\"ChildWrapper\">\n              <div className=\"mainBody\">\n                <MainBody />\n              </div>\n            </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}